/*
 * Copyright (c) 2020, Jordan Zomerlei <https://github.com/JZomerlei>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.runelite.client.plugins.mining;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import lombok.Getter;
import net.runelite.api.Player;
import net.runelite.api.gameval.AnimationID;
import net.runelite.api.gameval.ItemID;

@Getter
enum Pickaxe
{
	BRONZE(ItemID.BRONZE_PICKAXE, AnimationID.HUMAN_MINING_BRONZE_PICKAXE, AnimationID.HUMAN_MINING_BRONZE_PICKAXE_WALL, AnimationID.HUMAN_MINING_BRONZE_PICKAXE_NOREACHFORWARD),
	IRON(ItemID.IRON_PICKAXE, AnimationID.HUMAN_MINING_IRON_PICKAXE, AnimationID.HUMAN_MINING_IRON_PICKAXE_WALL, AnimationID.HUMAN_MINING_IRON_PICKAXE_NOREACHFORWARD),
	STEEL(ItemID.STEEL_PICKAXE, AnimationID.HUMAN_MINING_STEEL_PICKAXE, AnimationID.HUMAN_MINING_STEEL_PICKAXE_WALL, AnimationID.HUMAN_MINING_STEEL_PICKAXE_NOREACHFORWARD),
	BLACK(ItemID.BLACK_PICKAXE, AnimationID.HUMAN_MINING_BLACK_PICKAXE, AnimationID.HUMAN_MINING_BLACK_PICKAXE_WALL, AnimationID.HUMAN_MINING_BLACK_PICKAXE_NOREACHFORWARD),
	MITHRIL(ItemID.MITHRIL_PICKAXE, AnimationID.HUMAN_MINING_MITHRIL_PICKAXE, AnimationID.HUMAN_MINING_MITHRIL_PICKAXE_WALL, AnimationID.HUMAN_MINING_MITHRIL_PICKAXE_NOREACHFORWARD),
	ADAMANT(ItemID.ADAMANT_PICKAXE, AnimationID.HUMAN_MINING_ADAMANT_PICKAXE, AnimationID.HUMAN_MINING_ADAMANT_PICKAXE_WALL, AnimationID.HUMAN_MINING_ADAMANT_PICKAXE_NOREACHFORWARD),
	RUNE(ItemID.RUNE_PICKAXE, AnimationID.HUMAN_MINING_RUNE_PICKAXE, AnimationID.HUMAN_MINING_RUNE_PICKAXE_WALL, AnimationID.HUMAN_MINING_RUNE_PICKAXE_NOREACHFORWARD),
	GILDED(ItemID.TRAIL_GILDED_PICKAXE, AnimationID.HUMAN_MINING_GILDED_PICKAXE, AnimationID.HUMAN_MINING_GILDED_PICKAXE_WALL, AnimationID.HUMAN_MINING_GILDED_PICKAXE_NOREACHFORWARD),
	DRAGON(ItemID.DRAGON_PICKAXE, AnimationID.HUMAN_MINING_DRAGON_PICKAXE, AnimationID.HUMAN_MINING_DRAGON_PICKAXE_WALL, AnimationID.HUMAN_MINING_DRAGON_PICKAXE_NOREACHFORWARD),
	DRAGON_OR(ItemID.ZALCANO_PICKAXE, AnimationID.HUMAN_MINING_ZALCANO_PICKAXE, AnimationID.HUMAN_MINING_ZALCANO_PICKAXE_WALL, AnimationID.HUMAN_MINING_ZALCANO_PICKAXE_NOREACHFORWARD),
	DRAGON_OR_TRAILBLAZER(ItemID.TRAILBLAZER_PICKAXE_NO_INFERNAL, AnimationID.HUMAN_MINING_TRAILBLAZER_PICKAXE_NO_INFERNAL, AnimationID.HUMAN_MINING_TRAILBLAZER_PICKAXE_NO_INFERNAL_WALL, AnimationID.HUMAN_MINING_TRAILBLAZER_PICKAXE_NO_INFERNAL_NOREACHFORWARD),
	DRAGON_UPGRADED(ItemID.DRAGON_PICKAXE_PRETTY, AnimationID.HUMAN_MINING_DRAGON_PICKAXE_PRETTY, AnimationID.HUMAN_MINING_DRAGON_PICKAXE_PRETTY_WALL, AnimationID.HUMAN_MINING_DRAGON_PICKAXE_PRETTY_NOREACHFORWARD),
	INFERNAL(ItemID.INFERNAL_PICKAXE, AnimationID.HUMAN_MINING_INFERNAL_PICKAXE, AnimationID.HUMAN_MINING_INFERNAL_PICKAXE_WALL, AnimationID.HUMAN_MINING_INFERNAL_PICKAXE_NOREACHFORWARD),
	THIRDAGE(ItemID._3A_PICKAXE, AnimationID.HUMAN_MINING_3A_PICKAXE, AnimationID.HUMAN_MINING_3A_PICKAXE_WALL, AnimationID.HUMAN_MINING_3A_PICKAXE_NOREACHFORWARD),
	CRYSTAL(ItemID.CRYSTAL_PICKAXE, AnimationID.HUMAN_MINING_CRYSTAL_PICKAXE, AnimationID.HUMAN_MINING_CRYSTAL_PICKAXE_WALL, AnimationID.HUMAN_MINING_CRYSTAL_PICKAXE_NOREACHFORWARD),
	TRAILBLAZER(ItemID.TRAILBLAZER_PICKAXE, AnimationID.HUMAN_MINING_LEAGUE_TRAILBLAZER_PICKAXE, AnimationID.HUMAN_MINING_LEAGUE_TRAILBLAZER_PICKAXE_NOREACHFORWARD,
		AnimationID.HUMAN_MINING_ZALCANO_LEAGUE_TRAILBLAZER_PICKAXE, AnimationID.HUMAN_MINING_LEAGUE_TRAILBLAZER_PICKAXE_WALL);

	private final int itemId;
	private final int[] animIds;

	private static final Map<Integer, Pickaxe> PICKAXE_ANIM_IDS;

	static
	{
		ImmutableMap.Builder<Integer, Pickaxe> builder = new ImmutableMap.Builder<>();

		for (Pickaxe pickaxe : values())
		{
			for (int animId : pickaxe.animIds)
			{
				builder.put(animId, pickaxe);
			}
		}

		PICKAXE_ANIM_IDS = builder.build();
	}

	Pickaxe(int itemId, int ... animIds)
	{
		this.itemId = itemId;
		this.animIds = animIds;
	}

	boolean matchesMiningAnimation(final Player player)
	{
		return player != null && fromAnimation(player.getAnimation()) == this;
	}

	static Pickaxe fromAnimation(int animId)
	{
		return PICKAXE_ANIM_IDS.get(animId);
	}
}
